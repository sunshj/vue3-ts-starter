import fs from 'node:fs/promises'
import type { Plugin } from 'vite'

interface Options {
  /** @default './src/assets/svgIcons' */
  entry?: string
  /** @default './src/common/menu-icons.ts' */
  outputDir?: string
}

const FILE_HEADER = `// Auto-generated by menu-icons
// @ts-expect-error
// @ts-nocheck

import type { Component } from 'vue'
`

const FILE_BODY = `
export const menuIcons = [`

const FILE_FOOTER = `
export const menuIconsMap = menuIcons.reduce((map, { name, icon }) => {
  map.set(name, icon)
  return map
}, new Map<string, Component>())

export type MenuIconsEnum = (typeof menuIcons)[number]['name']
`

function vitePluginMenuIcons(options: Options = {}): Plugin {
  const { entry = './src/assets/svgIcons', outputDir = './src/common/menu-icons.ts' } = options
  return {
    name: 'vite-plugin-menu-icons',
    apply: 'serve',

    async buildStart() {
      const files = await fs.readdir(entry)
      const icons = files.map(icon => icon.replace('.svg', ''))
      const content = generateMenuIcons(icons)
      await fs.writeFile(outputDir, content, 'utf-8')
    }
  }
}

function generateMenuIcons(icons: string[]) {
  let result = FILE_BODY

  for (const icon of icons) {
    const item = `
  {
    name: '${icon}',
    icon: SvgIcon${kebabToPascal(icon)} as Component
  }`

    result += `${item},`
  }

  result = `${result}\n] as const\n`.replace(/},\n]/, '}\n]')

  return FILE_HEADER + result + FILE_FOOTER
}

function kebabToPascal(str: string) {
  return str
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('')
}

export { vitePluginMenuIcons as MenuIcons }
